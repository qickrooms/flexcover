<?xml version="1.0" encoding="utf-8"?>
<!-- 
 * Copyright (c) 2008 Allurent, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
    width="950" height="700"
    xmlns:view="com.allurent.coverage.view.*"
    applicationComplete="initializeApplication()"
    close="coverageViewerPM.onClose()"
    nativeDragEnter="handleDragIn(event)"
    nativeDragOver="handleDragIn(event)"
    nativeDragDrop="coverageViewerPM.handleDragDrop(event)"
    >
    
    <!-- Main CoverageViewer MXML Application View -->
    
    <mx:Script>
        <![CDATA[
        	import com.allurent.coverage.Controller;
        	import com.allurent.coverage.view.SourceCoverageView;
        	import com.allurent.coverage.view.GapFinderView;
        	import com.allurent.coverage.view.model.CoverageViewerPM;
        	import mx.events.PropertyChangeEvent;
        	import mx.controls.NavBar;
        	import com.allurent.coverage.model.FunctionModel;
        	import com.allurent.coverage.event.SourceViewEvent;
        	import com.allurent.coverage.model.ClassModel;
            
            [Bindable]
            private var coverageViewerPM:CoverageViewerPM = new CoverageViewerPM(Controller.instance);
                        
            /**
             * Initialize the application by listening for an Invoke event that will communicate
             * command line options.  Also attach the LocalConnection to receive live coverage
             * data.  
             */
            private function initializeApplication():void
            {
                nativeApplication.addEventListener(InvokeEvent.INVOKE, coverageViewerPM.handleInvoke);
                this.addEventListener(SourceViewEvent.VIEW_CLASS, handleSourceView);
            }
            
            private function handleSourceView(e:SourceViewEvent):void
            {
                var classModel:ClassModel = null;
                var lineNum:uint = 0;
                if (e.segmentModel is ClassModel)
                {
                    classModel = e.segmentModel as ClassModel;
                }
                else if (e.segmentModel is FunctionModel)
                {
                    var functionModel:FunctionModel = e.segmentModel as FunctionModel; 
                    classModel = functionModel.classModel;
                    lineNum = functionModel.line;
                }
                
                if (classModel == null)
                {
                    sourceViewBox.removeAllChildren();
                }
                else 
                {
                    var sourceView:SourceCoverageView = null;
                    if (sourceViewBox.numChildren > 0)
                    {
                        sourceView = sourceViewBox.getChildAt(0) as SourceCoverageView;
                    }
                    if (sourceView == null || sourceView.classModel != classModel)
                    {
                        sourceViewBox.removeAllChildren();
                        
                        sourceView = new SourceCoverageView();
                        sourceView.percentWidth = sourceView.percentHeight = 100;
                        sourceViewBox.addChild(sourceView);
                        
                        var gapFinder:GapFinderView = new GapFinderView();
                        gapFinder.width = 10;
                        gapFinder.percentHeight = 100;
                        sourceViewBox.addChild(gapFinder);
                        
                        var gapBinding:Function = function(e:PropertyChangeEvent):void {
                            if (e.property == "gapOffsets")
                            {
                                gapFinder.gapOffsets = e.newValue as Array;
                            }
                        }
                        sourceView.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, gapBinding);
                        
                        sourceView.show(coverageViewerPM.controller.project, classModel);
                    }
                    sourceView.scrollToLine(lineNum);
                }
            }
            
            private function handleDragIn(e:NativeDragEvent):void
            {
                if (coverageViewerPM.hasValidDragInFormat(e))
                {
                    NativeDragManager.acceptDragDrop(this);
                }
            }
                        
            private function openInput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, coverageViewerPM.inputFileSelected);
                var filter0:FileFilter = new FileFilter("All Files", "*.*");
                var filter1:FileFilter = new FileFilter("Coverage Metadata (.cvm)", "*.cvm");
                var filter2:FileFilter = new FileFilter("Coverage Report (.cvr)", "*.cvr");
                file.browseForOpen("Open File", [filter0, filter1, filter2]);
            }
                        
            private function saveOutput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, coverageViewerPM.outputFileSelected);
                file.browseForSave("Save XML Coverage Report");
            }
                        
            private function clearCoverageData():void
            {
                coverageViewerPM.controller.clearCoverageData();
            }
            
			private function createSelectedIndex( buttonBar : NavBar ) : void
			{
				buttonBar.selectedIndex = 0;
			}
        ]]>
    </mx:Script>
	
    <mx:HBox width="100%" horizontalAlign="left">
		<mx:Label text="Search By:"/>
		<mx:ToggleButtonBar 
			id="searchByCombo" 
			dataProvider="{coverageViewerPM.searchPM.searchByProvider}" 
			creationComplete="createSelectedIndex(searchByCombo);" 
			itemClick="coverageViewerPM.searchPM.changeSearchBy(event.item);searchInput.setFocus();"/>
		<mx:TextInput 
			id="searchInput" 
			width="100%" 
			text="{coverageViewerPM.searchPM.currentSearchInput}" 
			change="coverageViewerPM.searchPM.search(searchInput.text);" 
			creationComplete="searchInput.setFocus();"/>
        <mx:Button label="Load File..." click="openInput()"/>
        <mx:Button label="Save Report..." click="saveOutput()"/>
        <mx:Button label="Clear Coverage Data" click="clearCoverageData()"/>
    </mx:HBox>
    
    <!-- View of the coverage stats for the entire application -->
    <mx:HDividedBox width="100%" height="100%">
        <mx:TabNavigator id="coverageMeasureTabNavigator" 
        	width="600" height="100%" 
        	creationPolicy="all" 
        	selectedIndex="1" 
        	creationComplete="coverageViewerPM.changeCoverageMeasure(coverageMeasureTabNavigator.selectedIndex)" 
        	change="coverageViewerPM.changeCoverageMeasure(coverageMeasureTabNavigator.selectedIndex)">
            <view:BranchCoverageView 
            	id="branchCoverageView" 
            	width="100%" height="100%"
                label="Branches" 
                coverageViewerPM="{coverageViewerPM}"
                />
            <view:LineCoverageView 
            	id="lineCoverageView" 
            	width="100%" height="100%"
                label="Lines"
                coverageViewerPM="{coverageViewerPM}"
                />
        </mx:TabNavigator>
        <mx:HBox id="sourceViewBox" width="100%" height="100%"/>
    </mx:HDividedBox>

</mx:WindowedApplication>
