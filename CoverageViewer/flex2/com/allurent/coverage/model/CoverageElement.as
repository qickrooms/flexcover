/* 
 * Copyright (c) 2008 Allurent, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.allurent.coverage.model
{
    import flash.events.EventDispatcher;
    
    /**
     * Represents a single element of coverage as recorded by the instrumented application,
     * or present in coverage metadata generated by the compiler.
     */
    public class CoverageElement extends EventDispatcher
    {
        public var className:String;
        public var packageName:String;
        public var functionName:String;
        public var line:int;
        public var block:Boolean;    // This is currently not used
        public var pathname:String;  // This is optional
        
        /**
         * Get a "path" of names that can be used to resolve a LineModel for this CoverageElement
         * within the model. 
         */
        public function get path():Array
        {
            return [packageName, className, functionName, line.toString()];
        }
        
        /**
         * Construct a CoverageElement from an instrumentation or metadata string of this form:
         * 
         *    PACKAGE:CLASS/FUNCTION@LINE
         * or
         *    PACKAGE:CLASS/FUNCTION@LINE;PATHNAME
         *  
         * Note that FUNCTION may itself contain slashes for getter and setter suffixes of
         * "/get" and "/set" respectively.
         * 
         */
        public static function fromString(s:String):CoverageElement
        {
            var ce:CoverageElement = new CoverageElement();
            
            var firstSemi:int = s.indexOf(";");
            if (firstSemi >= 0)
            {
                ce.pathname = s.substring(firstSemi+1);
                s = s.substring(0, firstSemi);
            }
            
            var firstSlash:int = s.indexOf("/");
            if (firstSlash < 0)
            {
                return null;
            }
            else
            {
                var fullClass:String = s.substring(0, firstSlash);
                var colon:int = fullClass.indexOf(":");
                if (colon < 0)
                { 
                    ce.className = fullClass;
                    ce.packageName = "";
                }
                else
                {
                    ce.packageName = fullClass.substring(0, colon);
                    ce.className = fullClass.substring(colon+1);
                }
            }
            var lastAt:int = s.lastIndexOf("@");
            if (lastAt < 0)
            {
                return null;
            }

            ce.line = parseInt(s.substring(lastAt+1));
            ce.functionName = s.substring(firstSlash+1, lastAt);

            // For some reason this gets stuck in by the compiler.
            if (ce.functionName.substring(0, 8) == "private:")
            {
                ce.functionName = ce.functionName.substring(8);
            }
            
            return ce;            
        }
        
        override public function toString():String
        {
            return ((packageName == "") ? "" : (packageName + "."))
                   + className + ":" + functionName + "@" + line + (block ? "*" : "");  
        }
    }
}
