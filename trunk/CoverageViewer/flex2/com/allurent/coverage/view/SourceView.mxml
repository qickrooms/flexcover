<?xml version="1.0" encoding="utf-8"?>
<!-- 
 * Copyright (c) 2008 Allurent, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
    creationComplete="onCreationComplete()" xmlns:view="com.allurent.coverage.view.*">

    <mx:Script>
        <![CDATA[
            import mx.events.AIREvent;
            import com.allurent.coverage.model.SegmentModel;
            import com.allurent.coverage.model.LineModel;
            import com.allurent.coverage.model.ProjectModel;
            import com.allurent.coverage.model.CoverageModel;
        import com.allurent.coverage.model.ClassModel;
        import mx.managers.PopUpManager;
        import mx.core.Application;
        import flash.filesystem.FileMode;
        import flash.filesystem.FileStream;
        import flash.filesystem.File;

        public var project:ProjectModel;
        public var classModel:ClassModel;
        public var lines:Array;
        public static var viewMap:Object = {};
        
        public static function show(project:ProjectModel, c:ClassModel):void
        {
            var window:SourceView = viewMap[c.qualifiedName];
            if (window != null)
            {
                window.activate();
                return;
            }
            
            window = new SourceView();

            // track this new window
            viewMap[c.qualifiedName] = window;

            window.project = project;
            window.width = 800; window.height = 800;
            window.open();
            window.navigate(c);
        }
        
        public function handleClose(e:Event):void
        {
            delete viewMap[classModel.qualifiedName];
        }
        
        public function navigate(c:ClassModel):void
        {
            classModel = c;
            title = c.name;
            classView.segmentModel = c;

            nativeWindow.addEventListener(Event.CLOSE, handleClose);
            
            var f:File = project.findClass(c);

            var fileContents:String;
            if (f != null)
            {
                var input:FileStream = new FileStream();
                input.open(f, FileMode.READ);
                fileContents = input.readUTFBytes(input.bytesAvailable);
                input.close();
            }
            else
            {
                fileContents = "[source file not found]";
            }

            var styles:Array = [
            "pre {",
            "    background: #ffffff;",
            "    margin-top: 0px;",
            "    margin-bottom: 0px;",
            "}",
            "table {",
            "    border: #dcdcdc 1px solid;",
            "}",
            "td.data {",
            "    background: #f0f0f0;",
            "    border-top: #dcdcdc 1px solid;",
            "    border-right: #dcdcdc 1px solid;",
            "    font-size: 12px;",
            "    padding-right: 3px;",
            "    text-align: right;",
            "}",
            "td.goodCount {",
            "    background: #c0f0c0;",
            "    border-top: #dcdcdc 1px solid;",
            "    border-right: #dcdcdc 1px solid;",
            "    font-size: 12px;",
            "    padding-right: 3px;",
            "    text-align: right;",
            "}",
            "td.badCount {",
            "    background: #f0c0c0;",
            "    border-top: #dcdcdc 1px solid;",
            "    border-right: #dcdcdc 1px solid;",
            "    font-size: 12px;",
            "    padding-right: 3px;",
            "    text-align: right;",
            "}",
            "pre.badSrc {",
            "    background: #f0c0c0;",
            "    margin-top: 0px;",
            "    margin-bottom: 0px;",
            "}"];
            
            var html:XML =
                <html>
                    <head>
                       <style type="text/css">{styles.join(" ")}</style>
                    </head>
                    <body>[BODY]</body>
                </html>;

            lines = fileContents.split("\n");
            
            var newLines:Array = []; 
            for (var i:int = 1; i <= lines.length; i++)
            {
                newLines.push('<tr id="line' + i + '">' + getLineHtml(i, c.lineModelMap[i]) + '</tr>');
            }
            
            var sourceText:String = '<table cellspacing="0" cellpadding="0" class="src">'
                    + newLines.join("\n") + '</table>';

            htmlDisplay.htmlText = html.toXMLString().replace("[BODY]", sourceText);
        }
        
        private function getLineHtml(lineNum:uint, lineModel:LineModel):String
        {
            var line:String = lines[lineNum - 1];
            line = line.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");
            var sourceTag:String = '<pre>';
            var countElement:String = '<td class="data">&nbsp;</td>'; 
            if (lineModel != null)
            {
                lineModel.addEventListener(LineModel.EXECUTION_COUNT_CHANGE, handleLineCoverageChange,
                                           false, 0, true);
                if (lineModel.executionCount > 0)
                {
                    countElement =  '<td class="goodCount">&nbsp;' + lineModel.executionCount + '</td>';
                }
                else
                {
                    countElement =  '<td class="badCount">&nbsp;' + lineModel.executionCount + '</td>';
                    sourceTag = '<pre class="badSrc">';
                }
            }
            return '<td class="data">&nbsp;' + (lineNum++) + '</td>'
                   + countElement
                   + '<td>' + sourceTag + line + '</pre></td>';
        }
        
        private function handleLineCoverageChange(e:Event):void
        {
            var lineModel:LineModel = e.target as LineModel;
            var lineNum:uint = parseInt(lineModel.name);
            var element:Object = htmlDisplay.htmlLoader.window.document.getElementById("line" + lineNum);
            trace("element at",lineNum,element,"has count",lineModel.executionCount); 
            if (element != null)
            {
                element.innerHTML = getLineHtml(lineNum, lineModel);
            }
        }
        
        private function onCreationComplete():void
        {
        }
        ]]>
    </mx:Script>
    
    <mx:VDividedBox width="100%" height="100%">
        <view:ClassCoverageView id="classView" width="100%"/>
        <mx:HTML id="htmlDisplay" width="100%" height="100%"/>
    </mx:VDividedBox>
</mx:Window>
