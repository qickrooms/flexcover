<?xml version="1.0" encoding="utf-8"?>
<!-- 
 * Copyright (c) 2008 Allurent, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
<mx:HBox 
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ac="com.adobe.ac.*">
	
	<mx:Script>
		<![CDATA[
			import com.adobe.ac.util.OneTimeInterval;
			import com.adobe.ac.util.IOneTimeInterval;
			import mx.events.ListEvent;
			import mx.controls.Menu;
			import mx.controls.NavBar;
			import mx.events.MenuEvent;
			import com.allurent.coverage.view.model.CoverageViewerPM;
            
            [Bindable]
            public var coverageViewerPM:CoverageViewerPM;
			private var timer:IOneTimeInterval = new OneTimeInterval();            
            
			private function createSelectedIndex(buttonBar:NavBar):void
			{
				buttonBar.selectedIndex = 0;
			}
			
			private function changeSearchBy(item:Object):void
			{
				coverageViewerPM.searchPM.changeSearchBy(item);
				createFilterMenu();
				searchInput.setFocus();
				searchInput.setSelection(0, searchInput.text.length);
			}
			
			//TODO: Refactor, duplication
			private function createFilterMenu():void
			{
				var searchByMenu:Menu = Menu.createMenu(this, null, false);
				searchByMenu.setStyle("openDuration", 100);
				var label:String;
				var point:Point = new Point();
				
				if(coverageViewerPM.searchPM.searchForPackage)
				{
					if(coverageViewerPM.searchPM.showDetail)
					{
						label = "Only show packages";						
						searchByMenu.addEventListener(ListEvent.ITEM_CLICK, handleHideDetailChoice);
					}
					else
					{
						label = "Show packages and classes";
						searchByMenu.addEventListener(ListEvent.ITEM_CLICK, handleShowDetailChoice);
					}
					
					searchByMenu.dataProvider = label;
					point = new Point();
					point.y = searchByCombo.height;
					point = searchByCombo.localToGlobal(point);
					searchByMenu.show(point.x, point.y);				
				}
				else
				{
					if(coverageViewerPM.searchPM.showDetail)
					{
						label = "Only show classes";						
						searchByMenu.addEventListener(ListEvent.ITEM_CLICK, handleHideDetailChoice);
					}
					else
					{
						label = "Show classes and members";
						searchByMenu.addEventListener(ListEvent.ITEM_CLICK, handleShowDetailChoice);
					}
					
					searchByMenu.dataProvider = label;
					point = new Point();
					point.x = searchByCombo.x;
					point.y = searchByCombo.height;
					point = searchByCombo.localToGlobal(point);
					searchByMenu.show(point.x, point.y);					
				}
				searchByMenu.setFocus();	
			}
			
			private function handleShowDetailChoice(event:MenuEvent):void
			{
				coverageViewerPM.searchPM.showDetail = true;
				coverageViewerPM.searchPM.search(coverageViewerPM.searchPM.currentSearchInput);
			}
			
			private function handleHideDetailChoice(event:MenuEvent):void
			{
				coverageViewerPM.searchPM.showDetail = false;
				coverageViewerPM.searchPM.search(coverageViewerPM.searchPM.currentSearchInput);
			}			
	
			private function search(searchInput:String):void
			{
				timer.delay(500, onSearch, searchInput);
			}
			
			private function onSearch(searchInput:String):void
			{
				coverageViewerPM.searchPM.search(searchInput);
			}
			
            private function openInput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, coverageViewerPM.inputFileSelected);
                var filter0:FileFilter = new FileFilter("All Files", "*.*");
                var filter1:FileFilter = new FileFilter("Coverage Metadata (.cvm)", "*.cvm");
                var filter2:FileFilter = new FileFilter("Coverage Report (.cvr)", "*.cvr");
                file.browseForOpen("Open File", [filter0, filter1, filter2]);
            }
                        
            private function saveOutput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, coverageViewerPM.outputFileSelected);
                file.browseForSave("Save XML Coverage Report");
            }
                        
            private function clearCoverageData():void
            {
                coverageViewerPM.controller.clearCoverageData();
            }			         
		]]>
	</mx:Script>
	
	<ac:ObserveValue 
		source="{coverageViewerPM.enabled}" 
		handler="{searchInput.setFocus}" 
		value="{true}" 
		/>
	
	<mx:Label text="Search By:"/>
	<mx:ToggleButtonBar 
		id="searchByCombo" 
		dataProvider="{coverageViewerPM.searchPM.searchByProvider}" 
		creationComplete="createSelectedIndex(searchByCombo);" 
		itemClick="changeSearchBy(event.item);"/>		
	<mx:TextInput 
		id="searchInput" 
		width="100%" 
		text="{coverageViewerPM.searchPM.currentSearchInput}" 
		change="search(searchInput.text);" />
		
    <mx:Button label="Load File..." click="openInput()"/>
    <mx:Button label="Save Report..." click="saveOutput()"/>
    <mx:Button label="Clear Coverage Data" click="clearCoverageData()"/>

</mx:HBox>
