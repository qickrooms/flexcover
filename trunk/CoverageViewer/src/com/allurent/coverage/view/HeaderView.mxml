<?xml version="1.0" encoding="utf-8"?>
<!-- 
 * Copyright (c) 2008 Allurent, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
<mx:HBox 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ac="com.adobe.ac.*">
	
	<mx:Script>
		<![CDATA[
			import com.allurent.coverage.model.search.ISearchable;
			import com.allurent.coverage.view.model.HeaderPM;
			import com.adobe.ac.util.OneTimeInterval;
			import com.adobe.ac.util.IOneTimeInterval;
			import mx.events.ListEvent;
            
            [Bindable]
            public var model:HeaderPM;
			private var timer:IOneTimeInterval = new OneTimeInterval();            
			
			private function changeSearchBy(item:Object):void
			{
				setFocusOnSearch(model.searchPM.currentSearch);
			}
			
			private function setFocusOnSearch(currentSearch:ISearchable):void
			{
				if(!model.enabled) return;
                searchInput.setFocus();
                searchInput.setSelection(0, currentSearch.currentSearchInput.length);				
			}
				        
			private function search(searchInput:String):void
			{
				timer.delay(500, onSearch, searchInput);
			}
			
			private function onSearch(searchInput:String):void
			{
				model.searchPM.search(searchInput);
			}
						
            private function openInput():void
            {
                var file:File = new File();
                file.addEventListener(FileListEvent.SELECT_MULTIPLE, handleInputFilesSelected);
                var filter0:FileFilter = new FileFilter("All Files", "*.*");
                var filter1:FileFilter = new FileFilter("Coverage Metadata (.cvm)", "*.cvm");
                var filter2:FileFilter = new FileFilter("Coverage Report (.cvr)", "*.cvr");
                file.browseForOpenMultiple("Open File(s)", [filter0, filter1, filter2]);
            }
            
            private function handleInputFilesSelected(e:FileListEvent):void
            {             
                model.inputFilesSelected(e.files);
            }
            
            private function saveOutput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, handleOutputFileSelected);
                file.browseForSave("Save XML Coverage Report");
            }
            
            private function handleOutputFileSelected(event:Event):void
            {
                model.outputFileSelected(File(event.target));
            }
		]]>
	</mx:Script>

    <ac:Observe 
        source="{model.searchPM.currentSearch}" 
        handler="{setFocusOnSearch}" 
        />
	
    <mx:Button 
        label="Show details" 
        enabled="{model.enabled}" 
        toggle="true" 
        selected="{model.searchPM.currentSearch.showDetail}" 
        click="model.searchPM.toggleDetail()"/>
	
	<mx:Label text="Search By:"/>
    
	<mx:TextInput 
		id="searchInput" 
		width="100%" 
		text="{model.searchPM.currentSearchInput}" 
		enabled="{model.enabled}"
		change="search(searchInput.text);" />
	
    <mx:Button 
    	label="Load Files..." 
    	enabled="{!model.controller.recorder.isRecording}" 
    	click="openInput()"/>
    <mx:Button 
    	label="Save Report..." 
    	enabled="{model.enabled}" 
    	click="saveOutput()"/>
    <mx:Button 
    	label="Reset Recording" 
    	enabled="{model.canClearCoverageData(
    	                   model.enabled, 
    	                   model.controller.isCoverageDataCleared )}" 
    	click="model.clearCoverageData()"/>

</mx:HBox>
