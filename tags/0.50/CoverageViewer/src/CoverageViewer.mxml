<?xml version="1.0" encoding="utf-8"?>
<!-- 
 * Copyright (c) 2008 Allurent, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
    width="950" height="700"
    xmlns:view="com.allurent.coverage.view.*"
    applicationComplete="initializeApplication()"
    close="onClose()"
    nativeDragEnter="handleDragIn(event)"
    nativeDragOver="handleDragIn(event)"
    nativeDragDrop="handleDragDrop(event)"
    >
    
    <!-- Main CoverageViewer MXML Application View -->
    
    <mx:Script>
        <![CDATA[
            import mx.events.PropertyChangeEvent;
            import com.allurent.coverage.view.GapFinderView;
            import com.allurent.coverage.model.FunctionModel;
            import com.allurent.coverage.model.ClassModel;
            import com.allurent.coverage.view.SourceCoverageView;
            import com.allurent.coverage.event.SourceViewEvent;
            import mx.controls.Alert;
            import com.allurent.coverage.Controller;
            
            import flash.filesystem.File;
            
            // Top level Controller for the CoverageViewer application
            [Bindable]
            public var controller:Controller = new Controller();
            
            // Name of LocalConnection to use for receiving data
            private var connectionName:String = "_flexcover";
            
            /**
             * Initialize the application by listening for an Invoke event that will communicate
             * command line options.  Also attach the LocalConnection to receive live coverage
             * data.  
             */
            private function initializeApplication():void
            {
                nativeApplication.addEventListener(InvokeEvent.INVOKE, handleInvoke);
                this.addEventListener(SourceViewEvent.VIEW_CLASS, handleSourceView);
            }
            
            /**
             * When we get our invoke event, process options.  Only then can we attach
             * the LocalConnection (since this is option-dependent). 
             */
            private function handleInvoke(e:InvokeEvent):void
            {
                processOptions(e.arguments);
                controller.attachConnection(connectionName);
            }
            
            private function handleSourceView(e:SourceViewEvent):void
            {
                var classModel:ClassModel = null;
                var lineNum:uint = 0;
                if (e.segmentModel is ClassModel)
                {
                    classModel = e.segmentModel as ClassModel;
                }
                else if (e.segmentModel is FunctionModel)
                {
                    var functionModel:FunctionModel = e.segmentModel as FunctionModel; 
                    classModel = functionModel.classModel;
                    lineNum = functionModel.line;
                } 
                
                if (classModel == null)
                {
                    sourceViewBox.removeAllChildren();
                }
                else 
                {
                    var sourceView:SourceCoverageView = null;
                    if (sourceViewBox.numChildren > 0)
                    {
                        sourceView = sourceViewBox.getChildAt(0) as SourceCoverageView;
                    }
                    if (sourceView == null || sourceView.classModel != classModel)
                    {
                        sourceViewBox.removeAllChildren();
                        
                        sourceView = new SourceCoverageView();
                        sourceView.percentWidth = sourceView.percentHeight = 100;
                        sourceViewBox.addChild(sourceView);
                        
                        var gapFinder:GapFinderView = new GapFinderView();
                        gapFinder.width = 10;
                        gapFinder.percentHeight = 100;
                        sourceViewBox.addChild(gapFinder);
                        
                        var gapBinding:Function = function(e:PropertyChangeEvent):void {
                            if (e.property == "gapOffsets")
                            {
                                gapFinder.gapOffsets = e.newValue as Array;
                            }
                        }
                        sourceView.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, gapBinding);
                        
                        sourceView.show(controller.project, classModel);
                    }
                    sourceView.scrollToLine(lineNum);
                }
            }
            
            private function handleDragIn(e:NativeDragEvent):void
            {
                if (e.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
                {
                    NativeDragManager.acceptDragDrop(this);
                }
            }
            
            private function handleDragDrop(e:NativeDragEvent):void
            {
                if (e.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
                {
                    var files:Array = e.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
                    for each (var f:File in files)
                    {
                        processFileArgument(f);
                    }
                }
            }
            
            /**
             * When the main app window closes, exit the application after first cleaning up.
             *  
             */
            private function onClose():void
            {
                controller.close();
            }
                
            /**
             * Process command line options prior to full startup. 
             */
            private function processOptions(args:Array):void
            {
                var option:String = null;
                for each (var arg:String in args)
                {
                    if (arg.length > 0 && arg.charAt(0) == "-")
                    {
                        // Got an option, chuck it into a variable to affect subsequent non-option args.
                        option = arg.substring(1);
                    }
                    else if (option != null)
                    {
                        // All non-option strings are treated as arguments to be processed in light
                        // of the last option string that was seen.  There's no argument
                        // that is not associated with some option.
                        //
                        switch(option)
                        {
                            case "output":
                                controller.coverageOutputFile = new File(arg);
                                controller.autoExit = true;
                                break;
                                
                            case "coverage-metadata":
                                controller.loadMetadata(new File(arg));
                                break;
                                
                            case "trace-log":
                                controller.loadTraceLog(new File(arg));
                                break;
                                
                            case "source-path":
                                controller.project.sourcePath.addItem(new File(arg));
                                break;
                                
                            case "coverage-output":
                                // TODO: set up output filename for coverage data.
                                break;
                                
                            case "connection-name":
                                connectionName = arg;
                                break;
                            
                            default:
                                Alert.show("Unknown option: " + option);
                        }
                        option = null;
                    }
                    else
                    {
                        processFileArgument(new File(arg));
                    }
                }
                
                // After processing all options, load the models up from the project
                // and display the top-level report view.
                //
                lineCoverageView.segmentModel = controller.coverageModel;
                branchCoverageView.segmentModel = controller.coverageModel;
            }

            private function processFileArgument(f:File):void
            {
                if (f.name.match(/\.cvm$/))
                {
                    controller.loadMetadata(f);
                }
                else if (f.name.match(/\.cvr/))
                {
                    controller.loadCoverageReport(f);
                    lineCoverageView.segmentModel = controller.coverageModel;
                    branchCoverageView.segmentModel = controller.coverageModel;
                }
            }
            
            private function openInput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, inputFileSelected);
                var filter0:FileFilter = new FileFilter("All Files", "*.*");
                var filter1:FileFilter = new FileFilter("Coverage Metadata (.cvm)", "*.cvm");
                var filter2:FileFilter = new FileFilter("Coverage Report (.cvr)", "*.cvr");
                file.browseForOpen("Open File", [filter0, filter1, filter2]);
            }
            
            private function inputFileSelected(e:Event):void
            {
                processFileArgument(e.target as File);
            }
            
            private function saveOutput():void
            {
                var file:File = new File();
                file.addEventListener(Event.SELECT, outputFileSelected);
                file.browseForSave("Save XML Coverage Report");
            }
            
            private function outputFileSelected(e:Event):void
            {
                var file:File = e.target as File;
                controller.writeReport(file);
            }
            
            private function clearCoverageData():void
            {
                controller.clearCoverageData();
            }
        ]]>
    </mx:Script>

    <mx:HBox width="100%" horizontalAlign="left">
        <mx:Button label="Load File..." click="openInput()"/>
        <mx:Button label="Save Report..." click="saveOutput()"/>
        <mx:Button label="Clear Coverage Data" click="clearCoverageData()"/>
    </mx:HBox>
    
    <!-- View of the coverage stats for the entire application -->
    <mx:HDividedBox width="100%" height="100%">
        <mx:TabNavigator width="350" height="100%" creationPolicy="all">
            <view:BranchCoverageView id="branchCoverageView" width="100%" height="100%"
                label="Branches"
                controller="{controller}"/>
            <view:LineCoverageView id="lineCoverageView" width="100%" height="100%"
                label="Lines"
                controller="{controller}"/>
        </mx:TabNavigator>
        <mx:HBox id="sourceViewBox" width="100%" height="100%"/>
    </mx:HDividedBox>

</mx:WindowedApplication>
